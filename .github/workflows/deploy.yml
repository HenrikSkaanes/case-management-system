name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger from GitHub UI

env:
  AZURE_RESOURCE_GROUP: rg-case-management-dev
  AZURE_LOCATION: norwayeast
  IMAGE_NAME: case-management

jobs:
  # Job 1: Deploy Infrastructure
  deploy-infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      acr-login-server: ${{ steps.deploy.outputs.acrLoginServer }}
      acr-name: ${{ steps.deploy.outputs.acrName }}
      app-name: ${{ steps.deploy.outputs.containerAppName }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🏗️ Create Resource Group (if not exists)
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: 🚀 Deploy Bicep Template
        id: deploy
        run: |
          # Deploy infrastructure and capture outputs
          output=$(az deployment group create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --template-file infra/bicep/main.bicep \
            --parameters infra/bicep/main.parameters.dev.json \
            --query 'properties.outputs' \
            -o json)
          
          # Extract outputs and set as GitHub Actions outputs
          echo "acrLoginServer=$(echo $output | jq -r '.acrLoginServer.value')" >> $GITHUB_OUTPUT
          echo "acrName=$(echo $output | jq -r '.acrName.value')" >> $GITHUB_OUTPUT
          echo "containerAppName=$(echo $output | jq -r '.containerAppName.value')" >> $GITHUB_OUTPUT
          echo "applicationUrl=$(echo $output | jq -r '.applicationUrl.value')" >> $GITHUB_OUTPUT
          
          echo "✅ Infrastructure deployed successfully!"

  # Job 2: Build and Push Docker Image
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🔑 Login to Azure Container Registry
        run: |
          az acr login --name ${{ needs.deploy-infrastructure.outputs.acr-name }}

      - name: 🐳 Build Docker Image
        run: |
          docker build \
            -t ${{ needs.deploy-infrastructure.outputs.acr-login-server }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ needs.deploy-infrastructure.outputs.acr-login-server }}/${{ env.IMAGE_NAME }}:latest \
            .

      - name: 📤 Push Docker Image
        run: |
          docker push ${{ needs.deploy-infrastructure.outputs.acr-login-server }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ needs.deploy-infrastructure.outputs.acr-login-server }}/${{ env.IMAGE_NAME }}:latest
          echo "✅ Image pushed successfully!"

  # Job 3: Deploy to Container App
  deploy-app:
    name: 🚀 Deploy Container App
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-push]
    
    steps:
      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: � Get ACR Credentials
        id: acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show \
            --name ${{ needs.deploy-infrastructure.outputs.acr-name }} \
            --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show \
            --name ${{ needs.deploy-infrastructure.outputs.acr-name }} \
            --query "passwords[0].value" -o tsv)
          
          echo "::add-mask::$ACR_PASSWORD"
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      - name:  Update Container App with New Image
        run: |
          # Create or update registry credentials
          az containerapp registry set \
            --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --server ${{ needs.deploy-infrastructure.outputs.acr-login-server }} \
            --username ${{ steps.acr-creds.outputs.username }} \
            --password ${{ steps.acr-creds.outputs.password }}
          
          # Update the container image
          az containerapp update \
            --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ needs.deploy-infrastructure.outputs.acr-login-server }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --set-env-vars "REVISION=${{ github.sha }}"
          
          echo "✅ Container App updated successfully!"

      - name: 📊 Get Application URL
        id: get-url
        run: |
          url=$(az containerapp show \
            --name ${{ needs.deploy-infrastructure.outputs.app-name }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query 'properties.configuration.ingress.fqdn' \
            -o tsv)
          
          echo "Application URL: https://$url"
          echo "url=https://$url" >> $GITHUB_OUTPUT

      - name: 🎉 Deployment Summary
        run: |
          echo "## 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your Case Management System is live!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Application URL:** ${{ steps.get-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Image:** \`${{ needs.deploy-infrastructure.outputs.acr-login-server }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Deployed:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
